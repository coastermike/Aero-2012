#ifndef GLCD_H
#define GLCD_H

#define CS1	PORTDbits.RD11
#define CS2 PORTDbits.RD10
#define RESET PORTDbits.RD3
#define RW PORTDbits.RD5
#define DI PORTBbits.RB15
#define ENABLE PORTDbits.RD4
#define LCD_TRIS TRISE
#define LCD_DATA PORTE
#define BACKLIGHT PORTGbits.RG8

#define LEFT 0b01
#define RIGHT 0b10
#define BOTH 0b11
#define NONE 0b00

void initLCD(void);
void setBackLightOn();
void setBackLightOff();
void delayus(unsigned char us);
void msDelay(unsigned int ms);

// internal function prototypes
// you would not normally call these directly. but you can
// if you like.
unsigned char _lcd_status(void);
void _lcd_reset(void);
void _lcd_waitbusy(void);

// public function prototypes
// call these all you want !
void lcd_screenon(unsigned char on);
void lcd_cls(void);
void lcd_setpage(unsigned char page);
void lcd_setxaddr(unsigned char x);
void lcd_selectside(unsigned char sides);
void lcd_write (unsigned char data);
unsigned char lcd_read (void);
void lcd_plotpixel(unsigned char rx, unsigned char ry);
void lcd_string(unsigned char page, unsigned char xaddress, char *string, unsigned char font);
void lcd_putchar(char c);
void lcd_putcharsmall(char c);
void lcd_puts(char *string);
void lcd_putsmalls(char *string);

static const char font[]= {
	0x00, 0x00, 0x00, 0x00,	0x00,// (space)
	0x00, 0x00, 0x5F, 0x00, 0x00,// !
	0x00, 0x07, 0x00, 0x07, 0x00,// "
	0x14, 0x7F, 0x14, 0x7F, 0x14,// #
	0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
	0x23, 0x13, 0x08, 0x64, 0x62,// %
	0x36, 0x49, 0x55, 0x22, 0x50,// &
	0x00, 0x05, 0x03, 0x00, 0x00,// '
	0x00, 0x1C, 0x22, 0x41, 0x00,// (
	0x00, 0x41, 0x22, 0x1C, 0x00,// )
	0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
	0x08, 0x08, 0x3E, 0x08, 0x08,// +
	0x00, 0x50, 0x30, 0x00, 0x00,// ,
	0x08, 0x08, 0x08, 0x08, 0x08,// -
	0x00, 0x30, 0x30, 0x00, 0x00,// .
	0x20, 0x10, 0x08, 0x04, 0x02,// /
	0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
	0x00, 0x42, 0x7F, 0x40, 0x00,// 1
	0x42, 0x61, 0x51, 0x49, 0x46,// 2
	0x21, 0x41, 0x45, 0x4B, 0x31,// 3
	0x18, 0x14, 0x12, 0x7F, 0x10,// 4
	0x27, 0x45, 0x45, 0x45, 0x39,// 5
	0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
	0x01, 0x71, 0x09, 0x05, 0x03,// 7
	0x36, 0x49, 0x49, 0x49, 0x36,// 8
	0x06, 0x49, 0x49, 0x29, 0x1E,// 9
	0x00, 0x36, 0x36, 0x00, 0x00,// :
	0x00, 0x56, 0x36, 0x00, 0x00,// ;
	0x00, 0x08, 0x14, 0x22, 0x41,// <
	0x14, 0x14, 0x14, 0x14, 0x14,// =
	0x41, 0x22, 0x14, 0x08, 0x00,// >
	0x02, 0x01, 0x51, 0x09, 0x06,// ?
	0x32, 0x49, 0x79, 0x41, 0x3E,// @
	0x7E, 0x11, 0x11, 0x11, 0x7E,// A
	0x7F, 0x49, 0x49, 0x49, 0x36,// B
	0x3E, 0x41, 0x41, 0x41, 0x22,// C
	0x7F, 0x41, 0x41, 0x22, 0x1C,// D
	0x7F, 0x49, 0x49, 0x49, 0x41,// E
	0x7F, 0x09, 0x09, 0x01, 0x01,// F
	0x3E, 0x41, 0x41, 0x51, 0x32,// G
	0x7F, 0x08, 0x08, 0x08, 0x7F,// H
	0x00, 0x41, 0x7F, 0x41, 0x00,// I
	0x20, 0x40, 0x41, 0x3F, 0x01,// J
	0x7F, 0x08, 0x14, 0x22, 0x41,// K
	0x7F, 0x40, 0x40, 0x40, 0x40,// L
	0x7F, 0x02, 0x04, 0x02, 0x7F,// M
	0x7F, 0x04, 0x08, 0x10, 0x7F,// N
	0x3E, 0x41, 0x41, 0x41, 0x3E,// O
	0x7F, 0x09, 0x09, 0x09, 0x06,// P
	0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
	0x7F, 0x09, 0x19, 0x29, 0x46,// R
	0x46, 0x49, 0x49, 0x49, 0x31,// S
	0x01, 0x01, 0x7F, 0x01, 0x01,// T
	0x3F, 0x40, 0x40, 0x40, 0x3F,// U
	0x1F, 0x20, 0x40, 0x20, 0x1F,// V
	0x7F, 0x20, 0x18, 0x20, 0x7F,// W
	0x63, 0x14, 0x08, 0x14, 0x63,// X
	0x03, 0x04, 0x78, 0x04, 0x03,// Y
	0x61, 0x51, 0x49, 0x45, 0x43,// Z
	0x00, 0x00, 0x7F, 0x41, 0x41,// [
	0x02, 0x04, 0x08, 0x10, 0x20,// "\"
	0x41, 0x41, 0x7F, 0x00, 0x00,// ]
	0x04, 0x02, 0x01, 0x02, 0x04,// ^
	0x40, 0x40, 0x40, 0x40, 0x40,// _
	0x00, 0x01, 0x02, 0x04, 0x00,// `
	0x20, 0x54, 0x54, 0x54, 0x78,// a
	0x7F, 0x48, 0x44, 0x44, 0x38,// b
	0x38, 0x44, 0x44, 0x44, 0x20,// c
	0x38, 0x44, 0x44, 0x48, 0x7F,// d
	0x38, 0x54, 0x54, 0x54, 0x18,// e
	0x08, 0x7E, 0x09, 0x01, 0x02,// f
	0x08, 0x14, 0x54, 0x54, 0x3C,// g
	0x7F, 0x08, 0x04, 0x04, 0x78,// h
	0x00, 0x44, 0x7D, 0x40, 0x00,// i
	0x20, 0x40, 0x44, 0x3D, 0x00,// j
	0x00, 0x7F, 0x10, 0x28, 0x44,// k
	0x00, 0x41, 0x7F, 0x40, 0x00,// l
	0x7C, 0x04, 0x18, 0x04, 0x78,// m
	0x7C, 0x08, 0x04, 0x04, 0x78,// n
	0x38, 0x44, 0x44, 0x44, 0x38,// o
	0x7C, 0x14, 0x14, 0x14, 0x08,// p
	0x08, 0x14, 0x14, 0x18, 0x7C,// q
	0x7C, 0x08, 0x04, 0x04, 0x08,// r
	0x48, 0x54, 0x54, 0x54, 0x20,// s
	0x04, 0x3F, 0x44, 0x40, 0x20,// t
	0x3C, 0x40, 0x40, 0x20, 0x7C,// u
	0x1C, 0x20, 0x40, 0x20, 0x1C,// v
	0x3C, 0x40, 0x30, 0x40, 0x3C,// w
	0x44, 0x28, 0x10, 0x28, 0x44,// x
	0x0C, 0x50, 0x50, 0x50, 0x3C,// y
	0x44, 0x64, 0x54, 0x4C, 0x44,// z
	0x00, 0x08, 0x36, 0x41, 0x00,// {
	0x00, 0x00, 0x7F, 0x00, 0x00,// |
	0x00, 0x41, 0x36, 0x08, 0x00,// }
	0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
	0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
};

static const char fontsmall[]= {
	0x00, 0x00, 0x00, 0x00,	  // (space)
	0x00, 0x17, 0x00, 0x00,   //Char ! 
	0x03, 0x00, 0x03, 0x00,   //Char " 
	0x1f, 0x0a, 0x1f, 0x00,   //Char # 
	0x14, 0x1f, 0x0a, 0x00,   //Char $ 
	0x09, 0x04, 0x12, 0x00,   //Char % 
	0x1a, 0x15, 0x1e, 0x00,   //Char & 
	0x03, 0x01, 0x00, 0x00,   //Char ' 
	0x0e, 0x11, 0x00, 0x00,   //Char ( 
	0x11, 0x0e, 0x00, 0x00,   //Char ) 
	0x15, 0x0e, 0x15, 0x00,   //Char  
	0x04, 0x0e, 0x04, 0x00,   //Char + 
	0x10, 0x10, 0x00, 0x00,   //Char , 
	0x04, 0x04, 0x04, 0x00,   //Char - 
	0x00, 0x10, 0x00, 0x00,   //Char . 
	0x18, 0x04, 0x03, 0x00,   //Char / 
	0x1e, 0x11, 0x0f, 0x00,   //Char 0 
	0x12, 0x1f, 0x10, 0x00,   //Char 1 
	0x19, 0x15, 0x12, 0x00,   //Char 2 
	0x11, 0x15, 0x0a, 0x00,   //Char 3 
	0x06, 0x04, 0x1f, 0x00,   //Char 4 
	0x17, 0x15, 0x09, 0x00,   //Char 5 
	0x0e, 0x15, 0x08, 0x00,   //Char 6 
	0x01, 0x1d, 0x07, 0x00,   //Char 7 
	0x0a, 0x15, 0x0a, 0x00,   //Char 8 
	0x02, 0x15, 0x0e, 0x00,   //Char 9 
	0x00, 0x14, 0x00, 0x00,   //Char : 
	0x10, 0x14, 0x00, 0x00,   //Char ; 
	0x04, 0x0a, 0x11, 0x00,   //Char < 
	0x14, 0x14, 0x14, 0x00,   //Char = 
	0x11, 0x0a, 0x04, 0x00,   //Char > 
	0x01, 0x15, 0x02, 0x00,   //Char ? 
	0x1f, 0x11, 0x17, 0x00,   //Char @ 
	0x1e, 0x05, 0x1e, 0x00,   //Char A 
	0x1f, 0x15, 0x0a, 0x00,   //Char B 
	0x0e, 0x11, 0x11, 0x00,   //Char C 
	0x1f, 0x11, 0x0e, 0x00,   //Char D 
	0x1f, 0x15, 0x11, 0x00,   //Char E 
	0x1f, 0x05, 0x01, 0x00,   //Char F 
	0x0e, 0x11, 0x1d, 0x00,   //Char G 
	0x1f, 0x04, 0x1f, 0x00,   //Char H 
	0x11, 0x1f, 0x11, 0x00,   //Char I 
	0x08, 0x10, 0x0f, 0x00,   //Char J 
	0x1f, 0x04, 0x1b, 0x00,   //Char K 
	0x1f, 0x10, 0x10, 0x00,   //Char L 
	0x1f, 0x06, 0x1f, 0x00,   //Char M 
	0x1f, 0x02, 0x1f, 0x00,   //Char N 
	0x0e, 0x11, 0x0e, 0x00,   //Char O 
	0x1f, 0x05, 0x02, 0x00,   //Char P 
	0x0e, 0x19, 0x1e, 0x00,   //Char Q 
	0x1f, 0x05, 0x1a, 0x00,   //Char R 
	0x16, 0x15, 0x0d, 0x00,   //Char S 
	0x01, 0x1f, 0x01, 0x00,   //Char T 
	0x1f, 0x10, 0x1f, 0x00,   //Char U 
	0x0f, 0x10, 0x0f, 0x00,   //Char V 
	0x1f, 0x0c, 0x1f, 0x00,   //Char W 
	0x1b, 0x04, 0x1b, 0x00,   //Char X 
	0x03, 0x1c, 0x03, 0x00,   //Char Y 
	0x19, 0x15, 0x13, 0x00,   //Char Z 
	0x1f, 0x11, 0x00, 0x00,   //Char [ 
	0x03, 0x04, 0x18, 0x00,   //Char  
	0x11, 0x1f, 0x00, 0x00,   //Char ] 
	0x02, 0x01, 0x02, 0x00,   //Char ^ 
	0x00, 0x00, 0x00, 0x00,   //Char "\"
	0x01, 0x03, 0x00, 0x00,   //Char ` 
	0x18, 0x14, 0x1c, 0x00,   //Char a 
	0x1f, 0x14, 0x08, 0x00,   //Char b 
	0x08, 0x14, 0x14, 0x00,   //Char c 
	0x08, 0x14, 0x1f, 0x00,   //Char d 
	0x0c, 0x1c, 0x14, 0x00,   //Char e 
	0x04, 0x1e, 0x05, 0x00,   //Char f 
	0x0c, 0x04, 0x1c, 0x00,   //Char g 
	0x1f, 0x04, 0x18, 0x00,   //Char h 
	0x00, 0x1d, 0x00, 0x00,   //Char i 
	0x00, 0x1d, 0x00, 0x00,   //Char j 
	0x1f, 0x08, 0x14, 0x00,   //Char k 
	0x00, 0x1f, 0x00, 0x00,   //Char l 
	0x1c, 0x0c, 0x1c, 0x00,   //Char m 
	0x1c, 0x04, 0x18, 0x00,   //Char n 
	0x08, 0x14, 0x08, 0x00,   //Char o 
	0x1c, 0x14, 0x08, 0x00,   //Char p 
	0x08, 0x14, 0x1c, 0x00,   //Char q 
	0x1c, 0x04, 0x00, 0x00,   //Char r 
	0x10, 0x1c, 0x04, 0x00,   //Char s 
	0x04, 0x1e, 0x14, 0x00,   //Char t 
	0x1c, 0x10, 0x1c, 0x00,   //Char u 
	0x0c, 0x10, 0x0c, 0x00,   //Char v 
	0x1c, 0x18, 0x1c, 0x00,   //Char w 
	0x14, 0x08, 0x14, 0x00,   //Char x 
	0x0c, 0x10, 0x0c, 0x00,   //Char y 
	0x04, 0x1c, 0x10, 0x00,   //Char z 
	0x04, 0x1f, 0x11, 0x00,   //Char { 
	0x00, 0x1f, 0x00, 0x00,   //Char | 
	0x11, 0x1f, 0x04, 0x00,   //Char } 
	0x02, 0x01, 0x02, 0x01,  //Char ~
};

#endif
